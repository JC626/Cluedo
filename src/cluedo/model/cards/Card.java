package cluedo.model.cards;

/**
 * A game prop, used as a part of each human player's hand.
 * A card allows the player to reason about what may be in the answer,
 * as the cards that are in their hand clearly cannot be in the answer!
 * 
 * There are three types of Cards (Weapon, Room, and Suspect) all of which
 * will be used to ensure type safety and will rely on this class for functionality.
 * 
 * Note that the Pieces on the Board are separate from their Cards representations. 
 */
public abstract class Card
{
	/**
	 * Used to generate unique IDs for the cards - will increment by one per Card created.
	 */
	private static int generateID = 0;

	/**
	 * The unique ID for this Card, can be used to distinguish different Cards.
	 */
	private final int uniqueID;

	/**
	 * The human readable name of this Card.
	 * May not be empty.
	 * May not be null.
	 * Example: Lead Pipe
	 * Example: Miss Scarlett
	 * Example: Library
	 */
	private final String name;

	/**
	 * A Card held by at most one human player.
	 * @param name The human readable name of the Card. May not be empty, or null.
	 */
	public Card(String name)
	{
		if (name == null)
		{
			throw new IllegalArgumentException("Arguments may not be null");
		}

		if (name.equals(""))
		{
			throw new IllegalArgumentException("Name must be a non empty string");
		}

		this.name = name;

		this.uniqueID = generateID;
		generateID++;
	}

	/**
	 * The unique ID for this Card, can be used to distinguish different Cards.
	 * @return an unchanging unique integer ID for this Card.
	 */
	public int getID()
	{
		return uniqueID;
	}

	/**
	 * Will not be null.
	 * @return The name associated with this Card.
	 */
	public String getName()
	{
		return name;
	}

	/**
	 * Two Cards are considered equal iff their IDs are are equal.
	 */
	public boolean equals(Object o)
	{
		boolean isEqual = false;

		if (o instanceof Card)
		{
			Card p = (Card) o;
			isEqual = this.getID() == p.getID();
		}

		return isEqual;
	}

	/**
	 * Default hashcode as generated by Eclipse.
	 */
	@Override
	public int hashCode()
	{
		final int prime = 31;
		int result = 1;
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		return result;
	}
}
